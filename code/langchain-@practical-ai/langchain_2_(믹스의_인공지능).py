# -*- coding: utf-8 -*-
"""Copy of Langchain #2 (믹스의 인공지능).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l9UgG4lPRES0IKdw_lnhS4VTtwlUY_JM

# LangChain #2 - 개발에 도움이 되는 정보

* API 사용금액 조회
* 한글 Summarization
* Python 객체와 친해지기
* PromptLayer 서비스
---
참고 자료:
* 파이썬 문서: https://python.langchain.com/en/latest/index.html
* 개념 문서: https://docs.langchain.com/docs/
* 소스: https://github.com/hwchase17/langchain
---
"""

'''
#@title 기본 패키지(openai, langchain) 설치
!pip install -q openai
!pip install -q langchain

#@title 기타 패키지 설치 (구글검색, 위키피디아, VectorStore, HuggingFace Embedding)
!pip install -q google-search-results
!pip install -q wikipedia
!pip install -q faiss-cpu # 오픈소스 벡터DB (Facebook, MIT license)
!pip install -q sentence_transformers # HuggingFace Embedding 사용 위해서 필요
!pip install -q tiktoken # Summarization 할때 필요
!pip install -q promptlayer # openai API 조회 서비스
'''

import os
#@markdown https://platform.openai.com/account/api-keys
OPENAI_API_KEY = "" #@param {type:"string"}

# #@markdown https://huggingface.co/settings/tokens
# #@markdown HuggingFace에서 모델 다운로드나 클라우드 모델 사용하기 위해서 필요 (무료)
# HUGGINGFACEHUB_API_TOKEN = "" #@param {type:"string"}

# #@markdown https://serpapi.com/manage-api-key
# #@markdown 구글 검색하기 위해서 필요 (월 100회 무료)
# SERPAPI_API_KEY = "" #@param {type:"string"}

#@markdown https://promptlayer.com/
#@markdown OpenAI API/프롬프트를 내역을 로그로 남기는 서비스
PROMPTLAYER_API_KEY = "" #@param {type:"string"}

os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
# os.environ["HUGGINGFACEHUB_API_TOKEN"] = HUGGINGFACEHUB_API_TOKEN
# os.environ["SERPAPI_API_KEY"] = SERPAPI_API_KEY
os.environ["PROMPTLAYER_API_KEY"] = PROMPTLAYER_API_KEY

#@title 1. API 사용 금액 조회

from langchain.llms import OpenAI
from langchain.callbacks import get_openai_callback

chat = OpenAI(model_name='gpt-3.5-turbo')


# chat("1980년대 메탈 음악 5곡 추천해줘.")
with get_openai_callback() as cb:

  result = chat("1980년대 메탈 음악 5곡 추천해줘.")

  print(f"Total Tokens: {cb.total_tokens}")
  print(f"Prompt Tokens: {cb.prompt_tokens}")
  print(f"Completion Tokens: {cb.completion_tokens}")
  print(f"Total Cost (USD): ${cb.total_cost}")
  print(cb)

result

from langchain.chat_models import ChatOpenAI
from langchain.schema import (
    AIMessage,
    HumanMessage,
    SystemMessage
)

chat = ChatOpenAI()

with get_openai_callback() as cb:
  result = chat([HumanMessage(content="1990년대 메탈 음악 5곡 추천해줘.")])
  print(cb)
result

from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate

chain = LLMChain(llm=chat, prompt=PromptTemplate(input_variables=["text"], template="{text}"))


with get_openai_callback() as cb:
  result = chain.run("2000년대 메탈 음악 5곡 추천해줘.")
  print(cb)
result

#@title 2. 한글 Summarization

from langchain.chat_models import ChatOpenAI

chat = ChatOpenAI()

from langchain.document_loaders import WebBaseLoader

loader = WebBaseLoader(web_path="https://ko.wikipedia.org/wiki/NewJeans")
documents = loader.load()

from langchain.text_splitter import RecursiveCharacterTextSplitter
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
docs = text_splitter.split_documents(documents)
len(docs)

from langchain.chat_models import ChatOpenAI
from langchain.chains.summarize import load_summarize_chain
chain = load_summarize_chain(chat, chain_type="map_reduce", verbose=True)

chain.llm_chain.prompt.template

chain.llm_chain.prompt.template = chain.llm_chain.prompt.template.replace("CONCISE SUMMARY:", "CONCISE SUMMARY IN KOREAN:")

chain.llm_chain.prompt.template

with get_openai_callback() as cb:
  result = chain.run(docs[:3])
  print(cb)
result

#@title 3. Python Object와 친해지기

chain
# str(chain)
# chain.__str__()
# chain.__repr__()

dir(chain)

chain.__repr_args__()

chain.llm_chain.prompt.__repr_args__()

#@title 4. PromptLayer 서비스

from langchain.chat_models import PromptLayerChatOpenAI
# chat = ChatOpenAI()
chat = PromptLayerChatOpenAI(pl_tags=["langchain_230424"], temperature=0.9)

chat([HumanMessage(content="1980년대 메탈 음악 10곡 추천해줘.")])

